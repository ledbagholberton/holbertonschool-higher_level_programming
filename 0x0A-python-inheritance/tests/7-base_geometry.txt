Function base_geometry(self)
======================

Using base_geometry
-------------------
::
>>>BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>>bg = BaseGeometry()
>>>bg.integer_validator("my_int", 12)
>>>bg.integer_validator("width", 89)
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

::
>>> bg.integer_validator("float", 5.26)
Traceback (most recent call last):
TypeError: float must be an integer
>>> bg.integer_validator("False", False)
Traceback (most recent call last):
TypeError: True must be an integer
>>> bg.integer_validator("string", "holi")
Traceback (most recent call last):
TypeError: string must be an integer
>>> bg.integer_validator("list", [1,2,3])
Traceback (most recent call last):
TypeError: list must be an integer
>>> bg.integer_validator("none", None)
Traceback (most recent call last):
TypeError: none must be an integer
>>> bg.integer_validator("none")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator("none", 5, 1)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given
